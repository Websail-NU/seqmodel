{
  "agent_class": "seqmodel.experiment.basic_agent.BasicAgent",
  "agent_opt": {
    "model": {
      "model_class": "seqmodel.model.definition_model.DefinitionModel",
      "model_opt": {
        "decoder": {
          "class_name": "seqmodel.model.decoder.RNNDecoder",
          "opt": {
            "init_with_encoder_state": true
          },
          "rnn_class_name": "seqmodel.model.rnn_module.FixedContextRNNModule",
          "rnn_opt": {
            "create_zero_initial_state": false,
            "logit": {
              "name_prefix": "logit",
              "out_vocab_size": 27665,
              "trainable": true,
              "use_bias": true
            },
            "rnn_cell": {
              "fast_slow": true,
              "fast": {
                "cell_class": "tf.contrib.rnn.BasicLSTMCell",
                "cell_opt": {
                  "num_units": 300
                },
                "input_keep_prob": 1.0,
                "num_layers": 1,
                "output_keep_prob": 1.0
              },
              "slow": {
                "cell_class": "tf.contrib.rnn.BasicLSTMCell",
                "cell_opt": {
                  "num_units": 300
                },
                "input_keep_prob": 1.0,
                "num_layers": 1,
                "output_keep_prob": 1.0
              },
              "control": {
                "cell_class": "tf.contrib.rnn.BasicLSTMCell",
                "cell_opt": {
                  "num_units": 300
                },
                "input_keep_prob": 0.75,
                "num_layers": 1,
                "output_keep_prob": 0.75
              },
              "input_keep_prob": 0.75,
              "num_layers": 1,
              "output_keep_prob": 0.5
            },
            "time_major": true,
            "transform_input_mode": "ignored",
            "transform_output_mode": "highway"
          },
          "share": {
            "encoder_embedding": false,
            "encoder_rnn_params": true,
            "logit_weight_tying": false
          }
        },
        "embedding": {
          "char_dim": 28,
          "char_one_hot": true,
          "char_trainable": true,
          "char_vocab_size": 28,
          "char_init_filepath": null,
          "decoder_dim": 300,
          "decoder_trainable": false,
          "decoder_vocab_size": 27665,
          "decoder_init_filepath": "../../data/common_wordnet_defs/lemma_senses/dec_emb.cpkl",
          "encoder_dim": 300,
          "encoder_trainable": false,
          "encoder_vocab_size": 31267,
          "encoder_init_filepath": "../../data/common_wordnet_defs/lemma_senses/enc_emb.cpkl",
          "word_feature_dim": 300,
          "word_feature_trainable": true,
          "word_feature_vocab_size": 27665,
          "word_feature_init_filepath": null
        },
        "encoder": {
          "class_name": "seqmodel.model.encoder.DefWordEncoder",
          "opt": {
            "word_info_keep_prob": 0.5
          },
          "rnn_class_name": "seqmodel.model.rnn_module.BasicRNNModule",
          "rnn_opt": {
            "create_zero_initial_state": false,
            "logit": null,
            "rnn_cell": {
              "fast_slow": true,
              "fast": {
                "cell_class": "tf.contrib.rnn.BasicLSTMCell",
                "cell_opt": {
                  "num_units": 300
                },
                "input_keep_prob": 1.0,
                "num_layers": 1,
                "output_keep_prob": 1.0
              },
              "slow": {
                "cell_class": "tf.contrib.rnn.BasicLSTMCell",
                "cell_opt": {
                  "num_units": 300
                },
                "input_keep_prob": 1.0,
                "num_layers": 1,
                "output_keep_prob": 1.0
              },
              "control": {
                "cell_class": "tf.contrib.rnn.BasicLSTMCell",
                "cell_opt": {
                  "num_units": 300
                },
                "input_keep_prob": 0.75,
                "num_layers": 1,
                "output_keep_prob": 0.75
              },
              "input_keep_prob": 0.75,
              "num_layers": 1,
              "output_keep_prob": 0.5
            },
            "time_major": true
          },
          "tdnn_opt": {
            "activation_fn": "tf.tanh",
            "filter_widths": [
              2,
              3,
              4,
              5,
              6
            ],
            "num_filters": [
              10,
              30,
              40,
              40,
              40
            ]
          }
        },
        "word_context": {
          "share_feature_dec_embedding": true,
          "use_chars": true,
          "use_features": false,
          "use_word": true
        }
      }
    },
    "optim": {
      "clip_gradients": 5.0,
      "learning_rate": 0.5,
      "lr_decay_every": -1,
      "lr_decay_factor": 0.5,
      "lr_decay_imp_ratio": 0.98,
      "lr_decay_wait": 2,
      "lr_min": 0.1,
      "lr_start_decay_at": 1,
      "max_epochs": 30,
      "name": "GradientDescentOptimizer"
    }
  },
  "data_dir": "../../data/common_wordnet_defs/lemma_senses/",
  "data_files": {
    "test": "test.txt",
    "train": "train.txt",
    "valid": "valid.txt"
  },
  "feature_files": {
    "test": "test_features.txt",
    "train": "train_features.txt",
    "valid": "valid_features.txt"
  },
  "seq_weight_files": {
    "test": "",
    "train": "",
    "valid": ""
  },
  "token_weight_files": {
    "test": "",
    "train": "",
    "valid": ""
  },
  "iterator_class": "seqmodel.data.definition_iterator.Word2DefIterator",
  "iterator_opt": {
    "add_end_enc": true,
    "add_end_seq": true,
    "add_start_dec": true,
    "add_start_seq": true,
    "data_source": "",
    "feature_source": "",
    "token_weight_source": "",
    "seq_weight_source": "",
    "seq_delimiter": "\t",
    "shuffle": true,
    "time_major": true,
    "truncate_batch": true
  },
  "vocab_files": {
    "char_vocab": "char_vocab.txt",
    "in_vocab": "enc_vocab.txt",
    "out_vocab": "dec_vocab.txt"
  },
  "writeout_opt": {
    "checkpoint_dir": "model/",
    "experiment_dir": "experiment/lemma_senses/m2",
    "log_file": "experiment.log",
    "report_step_every": 1000,
    "training_state": "training_state.json"
  }
}
